#version 460 core

const float ka = 0.4f;
const float eta = 1.1;
const vec4 ma = vec4(0.2f, 0.2f, 0.2f, 1.0f);
const vec4 md = vec4(1.0f, 1.0f, 1.0f, 1.0f);
const vec4 ms = vec4(1.0f, 1.0f, 1.0f, 1.0f);
const float shi = 64.0f;
const float reflCoef = 1.3f;

in data {
	vec3 normal;
	vec3 viewer;
	vec3 light;
}f;

uniform samplerCube sky;

out vec4 color;

void main (void)
{
	vec3 viewer = normalize(-f.viewer);
	vec3 normal = normalize(f.normal);
	vec3 light = normalize(f.light);
	vec3 dir = normalize(refract(-viewer,normal, eta)*vec3(1,1,-1));
	float ndotl = dot(normal,light);
	color = min(1,(ka + max(0,ndotl)))*((1-reflCoef)*md + reflCoef*texture(sky,dir));
	if (ndotl > 0) 
	{
		vec3 refl = reflect(-light,normal);
		color += ms * pow(max(0,dot(refl,viewer)),shi);
	}
}